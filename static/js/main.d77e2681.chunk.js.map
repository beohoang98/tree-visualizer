{"version":3,"sources":["components/Control/index.tsx","components/Node/index.tsx","components/Tree/index.tsx","containers/Zoom.tsx","core/tree/node.ts","core/tree/binary.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Control","initialElements","onAddElement","onRemoveElement","useState","elements","setElements","newElement","setNewElement","handleInputChange","useCallback","ev","val","target","value","isNaN","classList","remove","add","handleSubmit","preventDefault","handleRemoveElement","index","currentTarget","getAttribute","splice","className","action","onSubmit","type","onChange","map","el","idx","data-role","data-index","title","onClick","HEIGHT","TreeNodeElement","node","x","y","onHeightCalculated","heights","setHeights","heightCallback","h","slice","useEffect","left","right","distanceLeft","Math","pow","distanceRight","pathLeft","d","stroke","pathRight","transform","data-height","cx","cy","r","textAnchor","dominantBaseline","TreeElement","tree","root","ZoomWrapper","children","width","height","scale","setScale","pos","setPos","mPos","setMPos","w","size","setSize","wrapperRef","useRef","onScroll","newScaleFactor","deltaY","dx","dy","onMouseMove","realX","clientX","realY","clientY","onResize","current","getBoundingClientRect","window","addEventListener","removeEventListener","xmlns","ref","preserveAspectRatio","onWheel","onMouseOver","style","viewBox","TreeNode","this","undefined","BinaryTree","serializeID","traversalNode","getNode","parent","min","isLeft","getMinRight","minRight","parentMinRight","App","setTree","addElement","console","debug","insert","Object","assign","create","getPrototypeOf","removeElement","delete","id","x1","y1","x2","y2","offset","stop-color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d77e2681.chunk.js","sourcesContent":["import React, { FC, useCallback, useState } from \"react\";\nimport \"./control.scss\";\n\nexport interface ControlProps {\n    initialElements?: number[];\n    onAddElement?: (element: number) => void;\n    onRemoveElement?: (element: number) => void;\n}\n\nexport const Control: FC<ControlProps> = ({\n    initialElements = [],\n    onAddElement = () => {},\n    onRemoveElement = () => {},\n}) => {\n    const [elements, setElements] = useState<number[]>(initialElements);\n    const [newElement, setNewElement] = useState<string | undefined>();\n\n    const handleInputChange = useCallback(\n        (ev: React.ChangeEvent<HTMLInputElement>) => {\n            const val = ev.target.value;\n            setNewElement(val);\n            if (val && !isNaN(+val)) {\n                ev.target.classList.remove(\"error\");\n            } else {\n                ev.target.classList.add(\"error\");\n            }\n        },\n        []\n    );\n\n    const handleSubmit = useCallback(\n        (ev: React.FormEvent) => {\n            ev.preventDefault();\n            if (!newElement || isNaN(+newElement)) return;\n            setElements([...elements, +newElement]);\n            setNewElement(\"\");\n            onAddElement(+newElement);\n        },\n        [elements, newElement, onAddElement]\n    );\n\n    const handleRemoveElement = useCallback(\n        (ev: React.MouseEvent<HTMLElement>) => {\n            const index = ev.currentTarget.getAttribute(\"data-index\");\n            if (!index || isNaN(+index)) return;\n            const value = elements[+index];\n            elements.splice(+index, 1);\n            setElements([...elements]);\n            onRemoveElement(value);\n        },\n        [elements, onRemoveElement]\n    );\n\n    return (\n        <div className=\"app-control\">\n            <form\n                className=\"app-control-input\"\n                action=\"#\"\n                onSubmit={handleSubmit}\n            >\n                <input\n                    value={newElement}\n                    type=\"text\"\n                    onChange={handleInputChange}\n                />\n                <button type=\"submit\">Add</button>\n            </form>\n            <ul className=\"app-control-elements\">\n                {elements.map((el, idx) => (\n                    <li key={idx} className=\"app-control-elements-item\">\n                        <div data-role=\"value\">{el}</div>\n                        <button\n                            data-role=\"remove\"\n                            data-index={idx}\n                            title=\"Remove\"\n                            onClick={handleRemoveElement}\n                        >\n                            <i className=\"fas fa-trash\"></i>\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n","import React, { FC, useCallback, useEffect, useState } from \"react\";\nimport { TreeNodeProps } from \"./props\";\n\nconst RADIUS = 20;\nconst DISTANCE = 20;\nconst HEIGHT = 70;\n\nexport const TreeNodeElement: FC<TreeNodeProps> = ({\n    node,\n    x,\n    y,\n    onHeightCalculated = () => {},\n}) => {\n    const [heights, setHeights] = useState([0, 0]);\n    const heightCallback = useCallback(\n        (index: number) => (h: number[]) => {\n            if (h[1 - index] + 1 <= heights[index]) return;\n            heights[index] = h[1 - index] + 1;\n            setHeights(heights.slice());\n        },\n        [heights]\n    );\n\n    useEffect(() => {\n        if (node) {\n            onHeightCalculated([node.left ? 1 : 0, node.right ? 1 : 0]);\n        }\n    }, [onHeightCalculated, node]);\n\n    if (!node) return null;\n\n    const distanceLeft = DISTANCE * Math.pow(2, heights[0]);\n    const distanceRight = DISTANCE * Math.pow(2, heights[1]);\n\n    const pathLeft = node.left ? (\n        <path\n            d={`M0,0 q0,${HEIGHT / 2},${-distanceLeft / 2},${HEIGHT / 2} t${\n                -distanceLeft / 2\n            },${HEIGHT / 2}`}\n            stroke=\"black\"\n        />\n    ) : null;\n    const pathRight = node.right ? (\n        <path\n            d={`M0,0 q0,${HEIGHT / 2},${distanceRight / 2},${HEIGHT / 2} t${\n                distanceRight / 2\n            },${HEIGHT / 2}`}\n            stroke=\"black\"\n        />\n    ) : null;\n\n    return (\n        <g transform={`translate(${x}, ${y})`} data-height={heights}>\n            {pathLeft}\n            <TreeNodeElement\n                key={node.left?.value}\n                node={node.left}\n                x={-distanceLeft}\n                y={HEIGHT}\n                onHeightCalculated={heightCallback(0)}\n            />\n            {pathRight}\n            <TreeNodeElement\n                key={node.right?.value}\n                node={node.right}\n                x={distanceRight}\n                y={HEIGHT}\n                onHeightCalculated={heightCallback(1)}\n            />\n            <g className=\"node\">\n                <circle cx=\"0\" cy=\"0\" r={RADIUS} />\n                <text x=\"0\" y=\"0\" textAnchor=\"middle\" dominantBaseline=\"middle\">\n                    {node.value}\n                </text>\n            </g>\n        </g>\n    );\n};\n","import React, { FC } from \"react\";\nimport { BinaryTree } from \"../../core/tree\";\nimport { TreeNodeElement } from \"../Node\";\nimport \"./tree.scss\";\nexport interface TreeProps {\n    tree: BinaryTree<number>;\n    x: number;\n    y: number;\n}\n\nexport const TreeElement: FC<TreeProps> = ({ tree, x, y }) => {\n    return (\n        <g>\n            <TreeNodeElement node={tree.root} x={x} y={y} />\n        </g>\n    );\n};\n","import React, { FC, useCallback, useEffect, useRef, useState } from \"react\";\n\nexport interface ZoomWrapperProps {\n    width: number;\n    height: number;\n}\n\nexport const ZoomWrapper: FC<ZoomWrapperProps> = ({\n    children,\n    width,\n    height,\n}) => {\n    const [scale, setScale] = useState(1);\n    const [pos, setPos] = useState({ x: 0, y: 0 });\n    const [mPos, setMPos] = useState({ x: 0, y: 0 });\n    const [size, setSize] = useState({ w: width, h: height });\n    const wrapperRef = useRef<SVGSVGElement>(null);\n\n    const onScroll = useCallback(\n        (ev: React.WheelEvent) => {\n            // console.debug(`[Scroll] ${ev.deltaY}`);\n            const newScaleFactor = Math.pow(1.001, -ev.deltaY);\n            const dx = (mPos.x - pos.x) * (1 - newScaleFactor);\n            const dy = (mPos.y - pos.y) * (1 - newScaleFactor);\n            setScale(scale * newScaleFactor);\n            setPos({ x: pos.x - dx, y: pos.y - dy });\n        },\n        [scale, mPos.x, mPos.y, pos.x, pos.y]\n    );\n    const onMouseMove = useCallback(\n        (ev: React.MouseEvent) => {\n            // console.debug(`[Mouse] ${ev.clientX} ${ev.clientY}`);\n            const realX = ev.clientX / scale + pos.x;\n            const realY = ev.clientY / scale + pos.y;\n            setMPos({ x: realX, y: realY });\n        },\n        [pos.x, pos.y, scale]\n    );\n\n    const onResize = useCallback(() => {\n        if (wrapperRef.current) {\n            const { width = 0, height = 0 } =\n                wrapperRef.current?.getBoundingClientRect() || {};\n            setSize({ w: width, h: height });\n        }\n    }, []);\n\n    useEffect(() => {\n        onResize();\n        window.addEventListener(\"resize\", onResize);\n        return () => window.removeEventListener(\"resize\", onResize);\n    }, [onResize]);\n\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            ref={wrapperRef}\n            preserveAspectRatio=\"true\"\n            onWheel={onScroll}\n            onMouseMove={onMouseMove}\n            onMouseOver={onMouseMove}\n            style={{ width: \"100%\", height: \"100%\" }}\n            viewBox={`${pos.x} ${pos.y} ${size.w / scale} ${size.h / scale}`}\n        >\n            <circle className=\"pointer\" cx={mPos.x} cy={mPos.y} r=\"10\" />\n            {children}\n        </svg>\n    );\n};\n","export class TreeNode<T = number> {\n    value: T;\n    left?: TreeNode<T>;\n    right?: TreeNode<T>;\n\n    constructor(value: T) {\n        this.value = value;\n        this.left = undefined;\n        this.right = undefined;\n    }\n}\n","import { TreeNode } from \"./node\";\n\nexport class BinaryTree<T = number> {\n    serializeID: number = 0;\n    root: TreeNode<T> | undefined = undefined;\n\n    insert(value: T): void {\n        ++this.serializeID;\n        if (!this.root) {\n            this.root = new TreeNode(value);\n            return;\n        }\n\n        let traversalNode: TreeNode<T> | undefined = this.root;\n        while (traversalNode) {\n            if (value < traversalNode.value) {\n                if (!traversalNode.left) {\n                    traversalNode.left = new TreeNode(value);\n                    break;\n                }\n                traversalNode = traversalNode.left;\n            } else {\n                if (!traversalNode.right) {\n                    traversalNode.right = new TreeNode(value);\n                    break;\n                }\n                traversalNode = traversalNode.right;\n            }\n        }\n    }\n\n    protected getNode(value: T): TreeNode<T> | undefined {\n        let traversalNode = this.root;\n        if (!traversalNode) return undefined;\n        while (traversalNode) {\n            if (traversalNode.value === value) return traversalNode;\n            if (value < traversalNode.value) {\n                traversalNode = traversalNode.left;\n            } else {\n                traversalNode = traversalNode.right;\n            }\n        }\n        return undefined;\n    }\n\n    contain(value: T): boolean {\n        return !!this.getNode(value);\n    }\n\n    getValue(value: T): T | undefined {\n        return this.getNode(value)?.value;\n    }\n\n    /**\n     *\n     * @returns [node, parent]\n     */\n    private getMinRight(node: TreeNode<T>): (TreeNode<T> | undefined)[] {\n        let parent = node;\n        let min = node.right;\n        while (min && min.left) {\n            parent = min;\n            min = min.left;\n        }\n        return [min, parent];\n    }\n\n    delete(value: T): TreeNode<T> | undefined {\n        if (!this.root) return undefined;\n        // debugger;\n\n        let traversalNode: TreeNode<T> | undefined = this.root;\n        let parent: TreeNode<T> = this.root;\n        let isLeft = false;\n\n        while (traversalNode && traversalNode.value !== value) {\n            parent = traversalNode;\n            if (value < traversalNode.value) {\n                isLeft = true;\n                traversalNode = traversalNode.left;\n            } else if (value > traversalNode.value) {\n                isLeft = false;\n                traversalNode = traversalNode.right;\n            }\n        }\n        if (!traversalNode) return undefined;\n\n        ++this.serializeID;\n\n        if (!traversalNode.left && !traversalNode.right) {\n            if (traversalNode === this.root) {\n                this.root = undefined;\n                return traversalNode;\n            }\n            if (isLeft) parent.left = undefined;\n            else parent.right = undefined;\n            return traversalNode;\n        }\n\n        if (!traversalNode.left) {\n            if (traversalNode === this.root) {\n                this.root = traversalNode.right;\n                return traversalNode;\n            }\n            if (isLeft) parent.left = traversalNode.right;\n            else parent.right = traversalNode.right;\n            return traversalNode;\n        }\n\n        if (!traversalNode.right) {\n            if (traversalNode === this.root) {\n                this.root = traversalNode.left;\n                return traversalNode;\n            }\n            if (isLeft) parent.left = traversalNode.left;\n            else parent.right = traversalNode.left;\n            return traversalNode;\n        }\n\n        // debugger;\n        const [minRight, parentMinRight] = this.getMinRight(traversalNode);\n        if (!minRight || !parentMinRight) return;\n\n        if (parentMinRight === traversalNode)\n            parentMinRight.right = minRight.right;\n        else parentMinRight.left = minRight.right;\n\n        minRight.left = traversalNode.left;\n        minRight.right = traversalNode.right;\n\n        if (traversalNode === this.root) {\n            this.root = minRight;\n            return traversalNode;\n        }\n\n        if (isLeft) parent.left = minRight;\n        else parent.right = minRight;\n\n        return traversalNode;\n    }\n}\n","import React, { useCallback, useState } from \"react\";\nimport \"./App.css\";\nimport { Control } from \"./components/Control\";\nimport { TreeElement } from \"./components/Tree\";\nimport { ZoomWrapper } from \"./containers/Zoom\";\nimport { BinaryTree } from \"./core/tree\";\n\nfunction App() {\n    const [tree, setTree] = useState(new BinaryTree());\n\n    const addElement = useCallback(\n        (value: number) => {\n            console.debug(\"Add \" + value);\n            tree.insert(value);\n            setTree(\n                Object.assign(Object.create(Object.getPrototypeOf(tree)), tree)\n            );\n        },\n        [tree]\n    );\n    const removeElement = useCallback(\n        (value: number) => {\n            console.debug(\"Remove \" + value);\n            tree.delete(value);\n            setTree(\n                Object.assign(Object.create(Object.getPrototypeOf(tree)), tree)\n            );\n        },\n        [tree]\n    );\n\n    return (\n        <div className=\"app-container\">\n            <div className=\"app-svg\">\n                <ZoomWrapper width={800} height={800}>\n                    <defs>\n                        <linearGradient\n                            id=\"path-gradient\"\n                            x1=\"0%\"\n                            y1=\"0%\"\n                            x2=\"0%\"\n                            y2=\"100%\"\n                        >\n                            <stop offset=\"0%\" stop-color=\"#22c\" />\n                            <stop offset=\"50%\" stop-color=\"#3cf\" />\n                            <stop offset=\"100%\" stop-color=\"#22c\" />\n                        </linearGradient>\n                    </defs>\n                    <TreeElement tree={tree} x={400} y={100} />\n                </ZoomWrapper>\n            </div>\n            <Control\n                onAddElement={addElement}\n                onRemoveElement={removeElement}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}